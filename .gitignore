# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg

# PyInstaller
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
.python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, if you have a direct dependency on a package that is not in Pipfile.lock,
#   then it is advised to ignore it.
Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   However, if you have a direct dependency on a package that is not in poetry.lock,
#   then it is advised to ignore it.
poetry.lock
#   Similar to Pipfile.lock, it is generally recommended to include pyproject.toml in version control.
#   However, if you have a direct dependency on a package that is not in pyproject.toml,
#   then it is advised to ignore it.
#pyproject.toml

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
pdm.lock
#   Similar to Pipfile.lock, it is generally recommended to include .pdm.toml in version control.
.pdm.toml
.pyo

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# Sage
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre
.pyre/

# pytype
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

# VSCode
.vscode/

# Conda
.conda/

# Development specific files
*.swp
*.swo
*~

# Test outputs and temporary files
.pytest_cache/
.hypothesis/
.coverage*/

# Generated CSV and analysis files (from development)
cleaned/
test_datasets/
test_final/
*.csv
*.json

# Local configuration files
config.ini
.local

# Environment-specific files
.envrc
.direnv/

# IDE and editor specific
.DS_Store
Thumbs.db

# Development data files (not part of package)
application_test.csv
application_train.csv
schema_analysis_completo_03.json

# Output directories (not part of package)
cleaned/
test_datasets/
test_final/

# Development scripts (not part of package)
csv_data_generator.py

# Original files that are now in src/ (to avoid duplication)
# clean_dataset.py
# schema_analyzer.py
# utils.py

# Development cache directories
.ruff_cache/
.pytest_cache/
__pycache__/

# Output directories (not part of package)
cleaned/
test_datasets/
test_final/

# IDE directories
.vscode/

# Development
README_DEVELOPMENT.md